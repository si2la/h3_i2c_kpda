#ifndef H3_GPIO_H
#define H3_GPIO_H

#include "h3.h"

#define H3_PORT_TO_GPIO(p,n)	((p * 32) + n)
#define H3_GPIO_TO_PORT(g)		(g / 32)
#define H3_GPIO_TO_NUMBER(g)	(g - (32 * H3_GPIO_TO_PORT(g)))

enum H3_GPIO_LEVEL {
    LOW = 0,
    HIGH = 1
};

enum H3_GPIO_MASK {
    GPIO_SELECT_MASK = 0x7,
    GPIO_PULL_MASK = 0x3,
    GPIO_INT_CFG_MASK = 0xf	///< PA and PG only
};

typedef enum H3_GPIO_FSEL {
    GPIO_FSEL_INPUT = 0,
    GPIO_FSEL_OUTPUT = 1,
    GPIO_FSEL_EINT = 6,		///< PA and PG only
    GPIO_FSEL_DISABLE = 7
} gpio_fsel_t;

typedef enum H3_GPIO_INT_CFG {		///< PA and PG only
    GPIO_INT_CFG_POS_EDGE = 0x0,
    GPIO_INT_CFG_NEG_EDGE = 0x1,
    GPIO_INT_CFG_HIGH_LEV = 0x2,
    GPIO_INT_CFG_LOW_LEV = 0x3,
    GPIO_INT_CFG_DOUBLE_EDGE = 0x4
} gpio_int_cfg_t;

enum H3_PA_SELECT_SHIFT {
    PA0_SELECT_CFG0_SHIFT = 0,
    PA1_SELECT_CFG0_SHIFT = 4,
    PA2_SELECT_CFG0_SHIFT = 8,
    PA3_SELECT_CFG0_SHIFT = 12,
    PA4_SELECT_CFG0_SHIFT = 16,
    PA5_SELECT_CFG0_SHIFT = 20,
    PA6_SELECT_CFG0_SHIFT = 24,
    PA8_SELECT_CFG1_SHIFT = 0,
    PA9_SELECT_CFG1_SHIFT = 4,
    PA10_SELECT_CFG1_SHIFT = 8,
    PA11_SELECT_CFG1_SHIFT = 12,
    PA12_SELECT_CFG1_SHIFT = 16,
    PA13_SELECT_CFG1_SHIFT = 20,
    PA14_SELECT_CFG1_SHIFT = 24,
    PA15_SELECT_CFG1_SHIFT = 28,
    PA16_SELECT_CFG2_SHIFT = 0,
    PA17_SELECT_CFG2_SHIFT = 4,
    PA18_SELECT_CFG2_SHIFT = 8,
    PA19_SELECT_CFG2_SHIFT = 12
};

enum H3_PL_SELECT_SHIFT {
    PL0_SELECT_CFG0_SHIFT = 0,
    PL1_SELECT_CFG0_SHIFT = 4,
    PL2_SELECT_CFG0_SHIFT = 8,
    PL3_SELECT_CFG0_SHIFT = 12,
    PL8_SELECT_CFG1_SHIFT = 0,
    PL9_SELECT_CFG1_SHIFT = 4,
    PL10_SELECT_CFG1_SHIFT = 8,
    PL11_SELECT_CFG1_SHIFT = 12
};

enum H3_PG_SELECT_SHIFT {
    PG6_SELECT_CFG0_SHIFT = 24,
    PG7_SELECT_CFG0_SHIFT = 28,
    PG8_SELECT_CFG1_SHIFT = 0,
    PG9_SELECT_CFG1_SHIFT = 4
};

enum H3_PA_PULL0_SHIFT {
    H3_PA0_PULL0_SHIFT = 0,
    H3_PA1_PULL0_SHIFT = 2,
    H3_PA2_PULL0_SHIFT = 4,
    H3_PA3_PULL0_SHIFT = 6,
    H3_PA4_PULL0_SHIFT = 8,
    H3_PA5_PULL0_SHIFT = 10
};

typedef enum H3_GPIO_PULL {
    GPIO_PULL_DISABLE = 0,
    GPIO_PULL_UP = 1,
    GPIO_PULL_DOWN = 2,
    GPIO_PULL_RESERVED = 3
} gpio_pull_t;

enum H3_PA_SELECT {
    H3_PA0_SELECT_UART2_TX = 2,
    H3_PA1_SELECT_UART2_RX = 2,

    H3_PA4_SELECT_UART0_TX = 2,
    H3_PA5_SELECT_UART0_RX = 2,

    H3_PA11_SELECT_TWI0_SCK = 2,
    H3_PA12_SELECT_TWI0_SDA = 2,

    H3_PA13_SELECT_SPI1_CS = 2,
    H3_PA14_SELECT_SPI1_CLK = 2,
    H3_PA15_SELECT_SPI1_MOSI = 2,
    H3_PA16_SELECT_SPI1_MISO = 2,

    H3_PA13_SELECT_UART3_TX = 3,
    H3_PA14_SELECT_UART3_RX = 3,

    H3_PA18_SELECT_TWI1_SCK = 3,
    H3_PA19_SELECT_TWI1_SDA = 3
};

enum H3_PC_SELECT {
    H3_PC0_SELECT_SPI0_MOSI = 3,
    H3_PC1_SELECT_SPI0_MISO = 3,
    H3_PC2_SELECT_SPI0_CLK = 3,
    H3_PC3_SELECT_SPI0_CS = 3
};

enum H3_PG_SELECT {
    H3_PG6_SELECT_UART1_TX = 2,
    H3_PG7_SELECT_UART1_RX = 2
};

#endif // H3_GPIO_H
